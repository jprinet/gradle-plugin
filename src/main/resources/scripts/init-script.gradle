import org.gradle.util.GradleVersion

// finish early if the build is not run with the minimum supported Gradle version
if (GradleVersion.current() < GradleVersion.version('4.1')) {
  logger.warn("Jenkins Build Scan plugin requires at least Gradle 4.1. Build uses Gradle ${GradleVersion.current()}.")
  return
}

// finish early if the build is an included build of a composite build
def isTopLevelBuild = !gradle.parent
if (!isTopLevelBuild) {
  return
}

// finish early if configuration parameters passed in via system properties are not valid/supported
def configuredCcudPluginVersion = System.getenv('BUILD_SCAN_PLUGIN_CCUD_PLUGIN_VERSION')
if (configuredCcudPluginVersion && isNotAtLeast(configuredCcudPluginVersion, '1.7')) {
  logger.warn("Common Custom User Data Gradle plugin must be at least 1.7. Configured version is $configuredCcudPluginVersion.")
  return
}

// conditionally apply the GE / Build Scan plugin to the classpath so it can be applied to the build further down in this script
initscript {
  def gePluginVersion = System.getenv('BUILD_SCAN_PLUGIN_GE_PLUGIN_VERSION')
  def ccudPluginVersion = System.getenv('BUILD_SCAN_PLUGIN_CCUD_PLUGIN_VERSION')
  def atLeastGradle5 = GradleVersion.current() >= GradleVersion.version('5.0')

  if (gePluginVersion || ccudPluginVersion) {
    repositories {
      maven { url 'https://plugins.gradle.org/m2' }
    }
  }

  dependencies {
    if (gePluginVersion) {
      classpath atLeastGradle5 ?
              "com.gradle:gradle-enterprise-gradle-plugin:$gePluginVersion" :
              "com.gradle:build-scan-plugin:1.16"
    }

    if (ccudPluginVersion) {
      classpath "com.gradle:common-custom-user-data-gradle-plugin:$ccudPluginVersion"
    }
  }
}

def BUILD_SCAN_PLUGIN_ID = 'com.gradle.build-scan'
def BUILD_SCAN_PLUGIN_CLASS = 'com.gradle.scan.plugin.BuildScanPlugin'

def GRADLE_ENTERPRISE_PLUGIN_ID = 'com.gradle.enterprise'
def GRADLE_ENTERPRISE_PLUGIN_CLASS = 'com.gradle.enterprise.gradleplugin.GradleEnterprisePlugin'
def GRADLE_ENTERPRISE_EXTENSION_CLASS = 'com.gradle.enterprise.gradleplugin.GradleEnterpriseExtension'

def CCUD_PLUGIN_ID = 'com.gradle.common-custom-user-data-gradle-plugin'
def CCUD_PLUGIN_CLASS = 'com.gradle.CommonCustomUserDataGradlePlugin'

def geUrl = System.getenv('BUILD_SCAN_PLUGIN_GE_URL')
def gePluginVersion = System.getenv('BUILD_SCAN_PLUGIN_GE_PLUGIN_VERSION')
def ccudPluginVersion = System.getenv('BUILD_SCAN_PLUGIN_CCUD_PLUGIN_VERSION')

// send a message to the server that the build has started
//logger.quiet(generateBuildScanLifeCycleMessage('BUILD_STARTED'))

// define a buildScanPublished listener that captures the build scan URL and sends it in a message to the server
def buildScanPublishedAction = { def buildScan ->
  if (buildScan.metaClass.respondsTo(buildScan, 'buildScanPublished', Action)) {
    buildScan.buildScanPublished { scan ->
      //logger.quiet(generateBuildScanLifeCycleMessage("BUILD_SCAN_URL:${scan.buildScanUri.toString()}"))
    }
  }
}

// register buildScanPublished listener and optionally apply the GE / Build Scan plugin
if (GradleVersion.current() < GradleVersion.version('6.0')) {
  rootProject {
    buildscript.configurations.getByName("classpath").incoming.afterResolve { ResolvableDependencies incoming ->
      def resolutionResult = incoming.resolutionResult

      if (gePluginVersion) {
        def scanPluginComponent = resolutionResult.allComponents.find {
          it.moduleVersion.with { group == "com.gradle" && (name == "build-scan-plugin" || name == "gradle-enterprise-gradle-plugin") }
        }
        if (!scanPluginComponent) {
          logger.quiet("Applying $BUILD_SCAN_PLUGIN_CLASS via init script")
          pluginManager.apply(initscript.classLoader.loadClass(BUILD_SCAN_PLUGIN_CLASS))
          buildScan.publishAlways()
          buildScan.setUploadInBackground(false)
          buildScan.server = geUrl
        }
      }

      if (ccudPluginVersion) {
        def ccudPluginComponent = resolutionResult.allComponents.find {
          it.moduleVersion.with { group == "com.gradle" && name == "common-custom-user-data-gradle-plugin" }
        }
        if (!ccudPluginComponent) {
          logger.quiet("Applying $CCUD_PLUGIN_CLASS via init script")
          pluginManager.apply(initscript.classLoader.loadClass(CCUD_PLUGIN_CLASS))
        }
      }
    }

    pluginManager.withPlugin(BUILD_SCAN_PLUGIN_ID) {
      buildScanPublishedAction(buildScan)
    }
  }
} else {
  gradle.settingsEvaluated { settings ->
    if (gePluginVersion) {
      if (!settings.pluginManager.hasPlugin(GRADLE_ENTERPRISE_PLUGIN_ID)) {
        logger.quiet("Applying $GRADLE_ENTERPRISE_PLUGIN_CLASS via init script")
        settings.pluginManager.apply(initscript.classLoader.loadClass(GRADLE_ENTERPRISE_PLUGIN_CLASS))
        extensionsWithPublicType(settings, GRADLE_ENTERPRISE_EXTENSION_CLASS).collect { settings[it.name] }.each { ext ->
          ext.buildScan.publishAlways()
          ext.buildScan.setUploadInBackground(false)
          ext.server = geUrl
        }
      }
    }

    if (ccudPluginVersion) {
      if (!settings.pluginManager.hasPlugin(CCUD_PLUGIN_ID)) {
        logger.quiet("Applying $CCUD_PLUGIN_CLASS via init script")
        settings.pluginManager.apply(initscript.classLoader.loadClass(CCUD_PLUGIN_CLASS))
      }
    }

    extensionsWithPublicType(settings, GRADLE_ENTERPRISE_EXTENSION_CLASS).collect { settings[it.name] }.each { ext ->
      buildScanPublishedAction(ext.buildScan)
    }
  }
}

static def extensionsWithPublicType(def container, String publicType) {
  container.extensions.extensionsSchema.elements.findAll { it.publicType.concreteClass.name == publicType }
}

static String generateBuildScanLifeCycleMessage(def attribute) {
  return "##gradle-jenkins-plugin ['${escape(attribute as String)}']" as String
}

static String escape(String value) {
  return value?.toCharArray()?.collect { ch -> escapeChar(ch) }?.join()
}

static String escapeChar(char ch) {
  String escapeCharacter = "|"
  switch (ch) {
    case '\n': return escapeCharacter + "n"
    case '\r': return escapeCharacter + "r"
    case '|': return escapeCharacter + "|"
    case '\'': return escapeCharacter + "\'"
    case '[': return escapeCharacter + "["
    case ']': return escapeCharacter + "]"
    default: return ch < 128 ? ch as String : escapeCharacter + String.format("0x%04x", (int) ch)
  }
}

static boolean isNotAtLeast(String versionUnderTest, String referenceVersion) {
  GradleVersion.version(versionUnderTest) < GradleVersion.version(referenceVersion)
}
